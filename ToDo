aquaPi ToDo list
================

- milestones for UI:
  a) change temperature threshold via web UI
  b) change light schedule via web UI

- register a cleanup method with atexit() to save config, and get along with
  werkzeug's neat auto-reload

- Navigation:
  /          Home, a configurable dashboard
  /control   Controllers, with foldable groups containing Controllers & their in/out
             Group is a new property of each Controller, set by user
             This page views and allows to edit operation parameters (Temp, Schedule)
             Edit needs auth.??
  /config    Configuration, show all bus nodes, their relations
             Allow authenticated users to add/change/remove topology
  /system    Global configuration, users, email, logging, start/stop, update ...
             Authenticated, at least some actions.
  /log       View logs with errors, warnings and configured events.
  /about     some system information, help pointers
  
- explore Flask.flash() - for input validation message?

- DB or pickle file? overlap of instance/aquaPi.sqlite & aquaPi/db.py?
  general handling of config data 

- user authentication: use Flask.redirect() & session

- add 'click' cmdline options, e.g. --resetfactory --list ...

- OS Sleep/Resume disturbs scheduler - is this a real problem?

- add a route for log & errors - backend implemented as BusListeners

- three access levels: viewer / operator (e.g. temperature setpoints) / admin (full config)

- simple UI & advanced UI, to allow easy start; simple = no AUX nodes!?

- WebUI snippets
  ref: https://codemyui.com/

- use Flask-Babel for i18n & l10
  ref: https://github.com/python-babel/flask-babel
  ref: https://flask-babel.tkte.ch/

- use a library for IO? create my own?

- REST API. What's the benefit of using flask-restful?
  Related: data exchange front-back via POST or REST API?

- more references - collection of extensions I might need
  ref: https://github.com/humiaozuzu/awesome-flask

- Telegram bot in Python:
  https://thepythoncorner.com/posts/2021-01-16-how-create-telegram-bot-in-python/

- packaging and deployment ... long way to there!

- not so common features:
  multiple sensors can feed one control unit (redundancy=safety),
  several control units can drive one output in a predictible manner,
  logging/email alerts for virtually anything,
  over-temperature could dim the light (aux nodes to limit light level
  from inverted|scaled temp)

- unique feature would be a driver interface to a TC420 light controller,
  wallneradam/tc420 on github is a Linux shell tool to interact with TC429


THOUGHTS
========

- python & Flask are closer to my skills and work style, than NodeJS and its huge library of tiny modules (introduces too many dependencies requiring permanent updates). Same might be the case with Django.

- Task Queues like huey could be used instead of my own MsgBus, but it requires exploration until I know where its limits are. For MsgBus I know them and can hopefully solve them.


DONE
====

- init
        python -m venv venv
        . ./venv/bin/activate
        pip install Flask sseclient
        ? pip install pylint
- run
        export FLASK_APP=aquaPi
        export FLASK_ENV=development
        flask run
- WebUI styling - small and clean std css
  ref:  https://purecss.io/
- proof of concept for front-end updates:
  push data from backend to UI, use page reload/Ajax/websocket/SSE?
  -> so far SSE seems appropriate
  ref: https://stackoverflow.com/questions/13386681/streaming-data-with-python-and-flask
  ref: https://javascript.info/server-sent-events
- sample with interaction of MsgListener with SSE-consuming page
- put the project on github. Or somewhere else? Unlikely
- use Jinja template inheritance, so far just plain templates are used
- cleanup the project name: 'aquaPi' (lowercase i), but home directory is 
  auquPI (upper!) to distinguish it from the app directory
- Flask in debug mode reloaded everything without cleanup, duplicating worker threads, etc.,
  at least the 1st reload is now handled correctly, still no atexit-cleanup
- milestones for machine room:
  a) simple sensor-temperature-relais controller
  b) 2 temperature controllers with redundant sensors and overlapping outputs
  c) scheduled light controller
- milestone for backend:
  save configuration and restore during startup (instead of hard-coded topology!)
  Evaluate pickle vs. shelve vs. klepto
  ref: https://pynative.com/make-python-class-json-serializable/  ??
  ref: https://pynative.com/python-convert-json-data-into-custom-python-object/  #jsonpickle
  ref: https://stackoverflow.com/questions/14668475/pickle-versus-shelve-storing-large-dictionaries-in-python/32586980#32586980

